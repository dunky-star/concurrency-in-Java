1. A process - is a unit of execution that has its own memory space. Each instance of a JVM runs as a process but isn't true 
   for all JVM implementations. When we run a Java console app, we're kicking off a process.
   If one Java app is running and we run another one, each application has its own memory space of HEAP. The heap isn't shared between them.
   
2. A Thread - is a unit of execution within a process. Each process can have multiple threads. In Java, every process (or app)
   has atleast one thread. Infact, just about every Java process also has multiple system threads that handle tasks like memory management,
   and I/O. We, the developers, don't explicitly create and code those threads. Our codes run in the main thread, or in other thread that we 
   explicitly create. 
   
   Creating a thread doesn't require as many resources as creating a process. Every thread created by a process shares the process's memory
   and files -> However, this can create a big problem as well. In addition to the process's memory, or heap, each thread has what's called
   a THREAD STACK, which is the memory that only that thread can access.    
   
   So, every Java app runs as a single process, and each process can have a multiple threads. Every process has a heap and every thread has
   thread stack.
   
   Why would we want to use multiple threads in our application?
   
	a) We sometimes want to perform a task that is going to take a long time, example, we might want to query a database or fetch data from
      the internet. We could do this on the main thread but the code within the main thread executes in a linear fashion. The main thread
	  won't be able to do anything else while waiting for data. i.e. execution of the main thread will be suspended.
	  -> To the user, this could appear as if our application died, or is frozen. 
	b) The second reason as to why we have to use thread is because an API requires us to provide one.
   